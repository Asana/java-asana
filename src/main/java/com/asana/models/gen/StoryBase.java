/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.asana.models.gen;

import java.util.Objects;
import java.util.Arrays;
import com.asana.models.gen.StoryCompact;
import com.asana.models.gen.UserCompact;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.OffsetDateTime;
/**
 * StoryBase
 */


public class StoryBase extends StoryCompact {
  @SerializedName("text")
  private String text = null;

  @SerializedName("html_text")
  private String htmlText = null;

  @SerializedName("is_pinned")
  private Boolean isPinned = null;


  public StoryBase text(String text) {
    this.text = text;
    return this;
  }

   /**
   * The plain text of the comment to add. Cannot be used with html_text.
   * @return text
  **/
  @Schema(example = "This is a comment.", description = "The plain text of the comment to add. Cannot be used with html_text.")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public StoryBase htmlText(String htmlText) {
    this.htmlText = htmlText;
    return this;
  }

   /**
   * [Opt In](#input-output-options). HTML formatted text for a comment. This will not include the name of the creator. *Note: This field is under active migration—please see our blog post for more information.*
   * @return htmlText
  **/
  @Schema(example = "<body>This is a comment.<body>", description = "[Opt In](#input-output-options). HTML formatted text for a comment. This will not include the name of the creator. *Note: This field is under active migration—please see our blog post for more information.*")
  public String getHtmlText() {
    return htmlText;
  }

  public void setHtmlText(String htmlText) {
    this.htmlText = htmlText;
  }

  public StoryBase isPinned(Boolean isPinned) {
    this.isPinned = isPinned;
    return this;
  }

   /**
   * *Conditional*. Whether the story should be pinned on the resource.
   * @return isPinned
  **/
  @Schema(example = "false", description = "*Conditional*. Whether the story should be pinned on the resource.")
  public Boolean isIsPinned() {
    return isPinned;
  }

  public void setIsPinned(Boolean isPinned) {
    this.isPinned = isPinned;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoryBase storyBase = (StoryBase) o;
    return Objects.equals(this.text, storyBase.text) &&
        Objects.equals(this.htmlText, storyBase.htmlText) &&
        Objects.equals(this.isPinned, storyBase.isPinned) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, htmlText, isPinned, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoryBase {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    htmlText: ").append(toIndentedString(htmlText)).append("\n");
    sb.append("    isPinned: ").append(toIndentedString(isPinned)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
