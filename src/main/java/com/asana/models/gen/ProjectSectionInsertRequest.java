/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.asana.models.gen;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ProjectSectionInsertRequest
 */


public class ProjectSectionInsertRequest {
  @SerializedName("project")
  private String project = null;

  @SerializedName("section")
  private String section = null;

  @SerializedName("before_section")
  private String beforeSection = null;

  @SerializedName("after_section")
  private String afterSection = null;


  public ProjectSectionInsertRequest project(String project) {
    this.project = project;
    return this;
  }

   /**
   * The project in which to reorder the given section.
   * @return project
  **/
  @Schema(example = "123456", required = true, description = "The project in which to reorder the given section.")
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }

  public ProjectSectionInsertRequest section(String section) {
    this.section = section;
    return this;
  }

   /**
   * The section to reorder.
   * @return section
  **/
  @Schema(example = "321654", required = true, description = "The section to reorder.")
  public String getSection() {
    return section;
  }

  public void setSection(String section) {
    this.section = section;
  }

  public ProjectSectionInsertRequest beforeSection(String beforeSection) {
    this.beforeSection = beforeSection;
    return this;
  }

   /**
   * Insert the given section immediately before the section specified by this parameter.
   * @return beforeSection
  **/
  @Schema(example = "86420", description = "Insert the given section immediately before the section specified by this parameter.")
  public String getBeforeSection() {
    return beforeSection;
  }

  public void setBeforeSection(String beforeSection) {
    this.beforeSection = beforeSection;
  }

  public ProjectSectionInsertRequest afterSection(String afterSection) {
    this.afterSection = afterSection;
    return this;
  }

   /**
   * Insert the given section immediately after the section specified by this parameter.
   * @return afterSection
  **/
  @Schema(example = "987654", description = "Insert the given section immediately after the section specified by this parameter.")
  public String getAfterSection() {
    return afterSection;
  }

  public void setAfterSection(String afterSection) {
    this.afterSection = afterSection;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectSectionInsertRequest projectSectionInsertRequest = (ProjectSectionInsertRequest) o;
    return Objects.equals(this.project, projectSectionInsertRequest.project) &&
        Objects.equals(this.section, projectSectionInsertRequest.section) &&
        Objects.equals(this.beforeSection, projectSectionInsertRequest.beforeSection) &&
        Objects.equals(this.afterSection, projectSectionInsertRequest.afterSection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(project, section, beforeSection, afterSection);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectSectionInsertRequest {\n");
    
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    section: ").append(toIndentedString(section)).append("\n");
    sb.append("    beforeSection: ").append(toIndentedString(beforeSection)).append("\n");
    sb.append("    afterSection: ").append(toIndentedString(afterSection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
