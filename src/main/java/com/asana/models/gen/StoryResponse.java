/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.asana.models.gen;

import java.util.Objects;
import java.util.Arrays;
import com.asana.models.gen.CustomFieldCompact;
import com.asana.models.gen.EnumOptionCompact;
import com.asana.models.gen.Preview;
import com.asana.models.gen.ProjectCompact;
import com.asana.models.gen.SectionCompact;
import com.asana.models.gen.StoryBase;
import com.asana.models.gen.StoryCompact;
import com.asana.models.gen.StoryResponseDates;
import com.asana.models.gen.TagCompact;
import com.asana.models.gen.TaskCompact;
import com.asana.models.gen.UserCompact;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import com.asana.models.GenResource;
/**
 * StoryResponse
 */


public class StoryResponse extends StoryBase {
  @SerializedName("is_edited")
  private Boolean isEdited = null;

  @SerializedName("hearted")
  private Boolean hearted = null;

  @SerializedName("hearts")
  private List<UserCompact> hearts = null;

  @SerializedName("num_hearts")
  private Integer numHearts = null;

  @SerializedName("liked")
  private Boolean liked = null;

  @SerializedName("likes")
  private List<UserCompact> likes = null;

  @SerializedName("num_likes")
  private Integer numLikes = null;

  @SerializedName("previews")
  private List<Preview> previews = null;

  @SerializedName("old_name")
  private String oldName = null;

  @SerializedName("new_name")
  private String newName = null;

  @SerializedName("old_dates")
  private StoryResponseDates oldDates = null;

  @SerializedName("new_dates")
  private StoryResponseDates newDates = null;

  @SerializedName("old_resource_subtype")
  private String oldResourceSubtype = null;

  @SerializedName("new_resource_subtype")
  private String newResourceSubtype = null;

  @SerializedName("story")
  private StoryCompact story = null;

  @SerializedName("assignee")
  private UserCompact assignee = null;

  @SerializedName("follower")
  private UserCompact follower = null;

  @SerializedName("old_section")
  private SectionCompact oldSection = null;

  @SerializedName("new_section")
  private SectionCompact newSection = null;

  @SerializedName("task")
  private TaskCompact task = null;

  @SerializedName("project")
  private ProjectCompact project = null;

  @SerializedName("tag")
  private TagCompact tag = null;

  @SerializedName("custom_field")
  private CustomFieldCompact customField = null;

  @SerializedName("old_text_value")
  private String oldTextValue = null;

  @SerializedName("new_text_value")
  private String newTextValue = null;

  @SerializedName("old_number_value")
  private Integer oldNumberValue = null;

  @SerializedName("new_number_value")
  private Integer newNumberValue = null;

  @SerializedName("old_enum_value")
  private EnumOptionCompact oldEnumValue = null;

  @SerializedName("new_enum_value")
  private EnumOptionCompact newEnumValue = null;

  @SerializedName("duplicate_of")
  private TaskCompact duplicateOf = null;

  @SerializedName("duplicated_from")
  private TaskCompact duplicatedFrom = null;

  @SerializedName("dependency")
  private TaskCompact dependency = null;

  @SerializedName("source")
  private String source = null;

  @SerializedName("target")
  private Object target = null;

   /**
   * *Conditional*. Whether the text of the story has been edited after creation.
   * @return isEdited
  **/
  @Schema(example = "false", description = "*Conditional*. Whether the text of the story has been edited after creation.")
  public Boolean isIsEdited() {
    return isEdited;
  }

   /**
   * *Deprecated - please use likes instead* *Conditional*. True if the story is hearted by the authorized user, false if not.
   * @return hearted
  **/
  @Schema(example = "false", description = "*Deprecated - please use likes instead* *Conditional*. True if the story is hearted by the authorized user, false if not.")
  public Boolean isHearted() {
    return hearted;
  }

   /**
   * *Deprecated - please use likes instead*  *Conditional*. Array of users who have hearted this story.
   * @return hearts
  **/
  @Schema(description = "*Deprecated - please use likes instead*  *Conditional*. Array of users who have hearted this story.")
  public List<UserCompact> getHearts() {
    return hearts;
  }

   /**
   * *Deprecated - please use likes instead*  *Conditional*. The number of users who have hearted this story.
   * @return numHearts
  **/
  @Schema(example = "5", description = "*Deprecated - please use likes instead*  *Conditional*. The number of users who have hearted this story.")
  public Integer getNumHearts() {
    return numHearts;
  }

   /**
   * *Conditional*. True if the story is liked by the authorized user, false if not.
   * @return liked
  **/
  @Schema(example = "false", description = "*Conditional*. True if the story is liked by the authorized user, false if not.")
  public Boolean isLiked() {
    return liked;
  }

   /**
   * *Conditional*. Array of users who have liked this story.
   * @return likes
  **/
  @Schema(description = "*Conditional*. Array of users who have liked this story.")
  public List<UserCompact> getLikes() {
    return likes;
  }

   /**
   * *Conditional*. The number of users who have liked this story.
   * @return numLikes
  **/
  @Schema(example = "5", description = "*Conditional*. The number of users who have liked this story.")
  public Integer getNumLikes() {
    return numLikes;
  }

   /**
   * *Conditional*. A collection of previews to be displayed in the story.  *Note: This property only exists for comment stories.*
   * @return previews
  **/
  @Schema(description = "*Conditional*. A collection of previews to be displayed in the story.  *Note: This property only exists for comment stories.*")
  public List<Preview> getPreviews() {
    return previews;
  }

  public StoryResponse oldName(String oldName) {
    this.oldName = oldName;
    return this;
  }

   /**
   * *Conditional*&#x27;
   * @return oldName
  **/
  @Schema(example = "This was the Old Name", description = "*Conditional*'")
  public String getOldName() {
    return oldName;
  }

  public void setOldName(String oldName) {
    this.oldName = oldName;
  }

   /**
   * *Conditional*
   * @return newName
  **/
  @Schema(example = "This is the New Name", description = "*Conditional*")
  public String getNewName() {
    return newName;
  }

  public StoryResponse oldDates(StoryResponseDates oldDates) {
    this.oldDates = oldDates;
    return this;
  }

   /**
   * Get oldDates
   * @return oldDates
  **/
  @Schema(description = "")
  public StoryResponseDates getOldDates() {
    return oldDates;
  }

  public void setOldDates(StoryResponseDates oldDates) {
    this.oldDates = oldDates;
  }

  public StoryResponse newDates(StoryResponseDates newDates) {
    this.newDates = newDates;
    return this;
  }

   /**
   * Get newDates
   * @return newDates
  **/
  @Schema(description = "")
  public StoryResponseDates getNewDates() {
    return newDates;
  }

  public void setNewDates(StoryResponseDates newDates) {
    this.newDates = newDates;
  }

   /**
   * *Conditional*
   * @return oldResourceSubtype
  **/
  @Schema(example = "default_task", description = "*Conditional*")
  public String getOldResourceSubtype() {
    return oldResourceSubtype;
  }

   /**
   * *Conditional*
   * @return newResourceSubtype
  **/
  @Schema(example = "milestone", description = "*Conditional*")
  public String getNewResourceSubtype() {
    return newResourceSubtype;
  }

  public StoryResponse story(StoryCompact story) {
    this.story = story;
    return this;
  }

   /**
   * Get story
   * @return story
  **/
  @Schema(description = "")
  public StoryCompact getStory() {
    return story;
  }

  public void setStory(StoryCompact story) {
    this.story = story;
  }

  public StoryResponse assignee(UserCompact assignee) {
    this.assignee = assignee;
    return this;
  }

   /**
   * Get assignee
   * @return assignee
  **/
  @Schema(description = "")
  public UserCompact getAssignee() {
    return assignee;
  }

  public void setAssignee(UserCompact assignee) {
    this.assignee = assignee;
  }

  public StoryResponse follower(UserCompact follower) {
    this.follower = follower;
    return this;
  }

   /**
   * Get follower
   * @return follower
  **/
  @Schema(description = "")
  public UserCompact getFollower() {
    return follower;
  }

  public void setFollower(UserCompact follower) {
    this.follower = follower;
  }

  public StoryResponse oldSection(SectionCompact oldSection) {
    this.oldSection = oldSection;
    return this;
  }

   /**
   * Get oldSection
   * @return oldSection
  **/
  @Schema(description = "")
  public SectionCompact getOldSection() {
    return oldSection;
  }

  public void setOldSection(SectionCompact oldSection) {
    this.oldSection = oldSection;
  }

  public StoryResponse newSection(SectionCompact newSection) {
    this.newSection = newSection;
    return this;
  }

   /**
   * Get newSection
   * @return newSection
  **/
  @Schema(description = "")
  public SectionCompact getNewSection() {
    return newSection;
  }

  public void setNewSection(SectionCompact newSection) {
    this.newSection = newSection;
  }

  public StoryResponse task(TaskCompact task) {
    this.task = task;
    return this;
  }

   /**
   * Get task
   * @return task
  **/
  @Schema(description = "")
  public TaskCompact getTask() {
    return task;
  }

  public void setTask(TaskCompact task) {
    this.task = task;
  }

  public StoryResponse project(ProjectCompact project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @Schema(description = "")
  public ProjectCompact getProject() {
    return project;
  }

  public void setProject(ProjectCompact project) {
    this.project = project;
  }

  public StoryResponse tag(TagCompact tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @Schema(description = "")
  public TagCompact getTag() {
    return tag;
  }

  public void setTag(TagCompact tag) {
    this.tag = tag;
  }

  public StoryResponse customField(CustomFieldCompact customField) {
    this.customField = customField;
    return this;
  }

   /**
   * Get customField
   * @return customField
  **/
  @Schema(description = "")
  public CustomFieldCompact getCustomField() {
    return customField;
  }

  public void setCustomField(CustomFieldCompact customField) {
    this.customField = customField;
  }

   /**
   * *Conditional*
   * @return oldTextValue
  **/
  @Schema(example = "This was the Old Text", description = "*Conditional*")
  public String getOldTextValue() {
    return oldTextValue;
  }

   /**
   * *Conditional*
   * @return newTextValue
  **/
  @Schema(example = "This is the New Text", description = "*Conditional*")
  public String getNewTextValue() {
    return newTextValue;
  }

   /**
   * *Conditional*
   * @return oldNumberValue
  **/
  @Schema(example = "1", description = "*Conditional*")
  public Integer getOldNumberValue() {
    return oldNumberValue;
  }

   /**
   * *Conditional*
   * @return newNumberValue
  **/
  @Schema(example = "2", description = "*Conditional*")
  public Integer getNewNumberValue() {
    return newNumberValue;
  }

  public StoryResponse oldEnumValue(EnumOptionCompact oldEnumValue) {
    this.oldEnumValue = oldEnumValue;
    return this;
  }

   /**
   * Get oldEnumValue
   * @return oldEnumValue
  **/
  @Schema(description = "")
  public EnumOptionCompact getOldEnumValue() {
    return oldEnumValue;
  }

  public void setOldEnumValue(EnumOptionCompact oldEnumValue) {
    this.oldEnumValue = oldEnumValue;
  }

  public StoryResponse newEnumValue(EnumOptionCompact newEnumValue) {
    this.newEnumValue = newEnumValue;
    return this;
  }

   /**
   * Get newEnumValue
   * @return newEnumValue
  **/
  @Schema(description = "")
  public EnumOptionCompact getNewEnumValue() {
    return newEnumValue;
  }

  public void setNewEnumValue(EnumOptionCompact newEnumValue) {
    this.newEnumValue = newEnumValue;
  }

  public StoryResponse duplicateOf(TaskCompact duplicateOf) {
    this.duplicateOf = duplicateOf;
    return this;
  }

   /**
   * Get duplicateOf
   * @return duplicateOf
  **/
  @Schema(description = "")
  public TaskCompact getDuplicateOf() {
    return duplicateOf;
  }

  public void setDuplicateOf(TaskCompact duplicateOf) {
    this.duplicateOf = duplicateOf;
  }

  public StoryResponse duplicatedFrom(TaskCompact duplicatedFrom) {
    this.duplicatedFrom = duplicatedFrom;
    return this;
  }

   /**
   * Get duplicatedFrom
   * @return duplicatedFrom
  **/
  @Schema(description = "")
  public TaskCompact getDuplicatedFrom() {
    return duplicatedFrom;
  }

  public void setDuplicatedFrom(TaskCompact duplicatedFrom) {
    this.duplicatedFrom = duplicatedFrom;
  }

  public StoryResponse dependency(TaskCompact dependency) {
    this.dependency = dependency;
    return this;
  }

   /**
   * Get dependency
   * @return dependency
  **/
  @Schema(description = "")
  public TaskCompact getDependency() {
    return dependency;
  }

  public void setDependency(TaskCompact dependency) {
    this.dependency = dependency;
  }

   /**
   * The component of the Asana product the user used to trigger the story.
   * @return source
  **/
  @Schema(example = "web", description = "The component of the Asana product the user used to trigger the story.")
  public String getSource() {
    return source;
  }

   /**
   * The object this story is associated with. Currently may only be a task.
   * @return target
  **/
  @Schema(description = "The object this story is associated with. Currently may only be a task.")
  public Object getTarget() {
    return target;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoryResponse storyResponse = (StoryResponse) o;
    return Objects.equals(this.isEdited, storyResponse.isEdited) &&
        Objects.equals(this.hearted, storyResponse.hearted) &&
        Objects.equals(this.hearts, storyResponse.hearts) &&
        Objects.equals(this.numHearts, storyResponse.numHearts) &&
        Objects.equals(this.liked, storyResponse.liked) &&
        Objects.equals(this.likes, storyResponse.likes) &&
        Objects.equals(this.numLikes, storyResponse.numLikes) &&
        Objects.equals(this.previews, storyResponse.previews) &&
        Objects.equals(this.oldName, storyResponse.oldName) &&
        Objects.equals(this.newName, storyResponse.newName) &&
        Objects.equals(this.oldDates, storyResponse.oldDates) &&
        Objects.equals(this.newDates, storyResponse.newDates) &&
        Objects.equals(this.oldResourceSubtype, storyResponse.oldResourceSubtype) &&
        Objects.equals(this.newResourceSubtype, storyResponse.newResourceSubtype) &&
        Objects.equals(this.story, storyResponse.story) &&
        Objects.equals(this.assignee, storyResponse.assignee) &&
        Objects.equals(this.follower, storyResponse.follower) &&
        Objects.equals(this.oldSection, storyResponse.oldSection) &&
        Objects.equals(this.newSection, storyResponse.newSection) &&
        Objects.equals(this.task, storyResponse.task) &&
        Objects.equals(this.project, storyResponse.project) &&
        Objects.equals(this.tag, storyResponse.tag) &&
        Objects.equals(this.customField, storyResponse.customField) &&
        Objects.equals(this.oldTextValue, storyResponse.oldTextValue) &&
        Objects.equals(this.newTextValue, storyResponse.newTextValue) &&
        Objects.equals(this.oldNumberValue, storyResponse.oldNumberValue) &&
        Objects.equals(this.newNumberValue, storyResponse.newNumberValue) &&
        Objects.equals(this.oldEnumValue, storyResponse.oldEnumValue) &&
        Objects.equals(this.newEnumValue, storyResponse.newEnumValue) &&
        Objects.equals(this.duplicateOf, storyResponse.duplicateOf) &&
        Objects.equals(this.duplicatedFrom, storyResponse.duplicatedFrom) &&
        Objects.equals(this.dependency, storyResponse.dependency) &&
        Objects.equals(this.source, storyResponse.source) &&
        Objects.equals(this.target, storyResponse.target) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isEdited, hearted, hearts, numHearts, liked, likes, numLikes, previews, oldName, newName, oldDates, newDates, oldResourceSubtype, newResourceSubtype, story, assignee, follower, oldSection, newSection, task, project, tag, customField, oldTextValue, newTextValue, oldNumberValue, newNumberValue, oldEnumValue, newEnumValue, duplicateOf, duplicatedFrom, dependency, source, target, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoryResponse {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    isEdited: ").append(toIndentedString(isEdited)).append("\n");
    sb.append("    hearted: ").append(toIndentedString(hearted)).append("\n");
    sb.append("    hearts: ").append(toIndentedString(hearts)).append("\n");
    sb.append("    numHearts: ").append(toIndentedString(numHearts)).append("\n");
    sb.append("    liked: ").append(toIndentedString(liked)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    numLikes: ").append(toIndentedString(numLikes)).append("\n");
    sb.append("    previews: ").append(toIndentedString(previews)).append("\n");
    sb.append("    oldName: ").append(toIndentedString(oldName)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    oldDates: ").append(toIndentedString(oldDates)).append("\n");
    sb.append("    newDates: ").append(toIndentedString(newDates)).append("\n");
    sb.append("    oldResourceSubtype: ").append(toIndentedString(oldResourceSubtype)).append("\n");
    sb.append("    newResourceSubtype: ").append(toIndentedString(newResourceSubtype)).append("\n");
    sb.append("    story: ").append(toIndentedString(story)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    follower: ").append(toIndentedString(follower)).append("\n");
    sb.append("    oldSection: ").append(toIndentedString(oldSection)).append("\n");
    sb.append("    newSection: ").append(toIndentedString(newSection)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    customField: ").append(toIndentedString(customField)).append("\n");
    sb.append("    oldTextValue: ").append(toIndentedString(oldTextValue)).append("\n");
    sb.append("    newTextValue: ").append(toIndentedString(newTextValue)).append("\n");
    sb.append("    oldNumberValue: ").append(toIndentedString(oldNumberValue)).append("\n");
    sb.append("    newNumberValue: ").append(toIndentedString(newNumberValue)).append("\n");
    sb.append("    oldEnumValue: ").append(toIndentedString(oldEnumValue)).append("\n");
    sb.append("    newEnumValue: ").append(toIndentedString(newEnumValue)).append("\n");
    sb.append("    duplicateOf: ").append(toIndentedString(duplicateOf)).append("\n");
    sb.append("    duplicatedFrom: ").append(toIndentedString(duplicatedFrom)).append("\n");
    sb.append("    dependency: ").append(toIndentedString(dependency)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
