/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.asana.models.gen;

import java.util.Objects;
import java.util.Arrays;
import com.asana.models.gen.CustomFieldCompact;
import com.asana.models.gen.CustomFieldSettingCompact;
import com.asana.models.gen.ProjectCompact;
import com.asana.models.gen.ProjectStatusResponse;
import com.asana.models.gen.UserCompact;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * ProjectBase
 */


public class ProjectBase extends ProjectCompact {
  @SerializedName("archived")
  private Boolean archived = null;

  /**
   * Color of the project.
   */
  @JsonAdapter(ColorEnum.Adapter.class)
  public enum ColorEnum {
    DARK_PINK("dark-pink"),
    DARK_GREEN("dark-green"),
    DARK_BLUE("dark-blue"),
    DARK_RED("dark-red"),
    DARK_TEAL("dark-teal"),
    DARK_BROWN("dark-brown"),
    DARK_ORANGE("dark-orange"),
    DARK_PURPLE("dark-purple"),
    DARK_WARM_GRAY("dark-warm-gray"),
    LIGHT_PINK("light-pink"),
    LIGHT_GREEN("light-green"),
    LIGHT_BLUE("light-blue"),
    LIGHT_RED("light-red"),
    LIGHT_TEAL("light-teal"),
    LIGHT_BROWN("light-brown"),
    LIGHT_ORANGE("light-orange"),
    LIGHT_PURPLE("light-purple"),
    LIGHT_WARM_GRAY("light-warm-gray");

    private String value;

    ColorEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ColorEnum fromValue(String text) {
      for (ColorEnum b : ColorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ColorEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("color")
  private ColorEnum color = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("current_status")
  private ProjectStatusResponse currentStatus = null;

  @SerializedName("custom_fields")
  private List<CustomFieldCompact> customFields = null;

  @SerializedName("custom_field_settings")
  private List<CustomFieldSettingCompact> customFieldSettings = null;

  /**
   * The default view (list, board, calendar, or timeline) of a project.
   */
  @JsonAdapter(DefaultViewEnum.Adapter.class)
  public enum DefaultViewEnum {
    LIST("list"),
    BOARD("board"),
    CALENDAR("calendar"),
    TIMELINE("timeline");

    private String value;

    DefaultViewEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DefaultViewEnum fromValue(String text) {
      for (DefaultViewEnum b : DefaultViewEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DefaultViewEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultViewEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultViewEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DefaultViewEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("default_view")
  private DefaultViewEnum defaultView = null;

  @SerializedName("due_date")
  private OffsetDateTime dueDate = null;

  @SerializedName("due_on")
  private OffsetDateTime dueOn = null;

  @SerializedName("followers")
  private List<UserCompact> followers = null;

  @SerializedName("html_notes")
  private String htmlNotes = null;

  @SerializedName("is_template")
  private Boolean isTemplate = null;

  /**
   * The layout (board or list view) of a project
   */
  @JsonAdapter(LayoutEnum.Adapter.class)
  public enum LayoutEnum {
    LIST("list"),
    BOARD("board");

    private String value;

    LayoutEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LayoutEnum fromValue(String text) {
      for (LayoutEnum b : LayoutEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LayoutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LayoutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LayoutEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LayoutEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("layout")
  private LayoutEnum layout = null;

  @SerializedName("members")
  private List<UserCompact> members = null;

  @SerializedName("modified_at")
  private OffsetDateTime modifiedAt = null;

  @SerializedName("notes")
  private String notes = null;

  @SerializedName("owner")
  private Object owner = null;

  @SerializedName("public")
  private Boolean _public = null;

  /**
   * *Read-only* The section migration status of this project.
   */
  @JsonAdapter(SectionMigrationStatusEnum.Adapter.class)
  public enum SectionMigrationStatusEnum {
    NOT_MIGRATED("not_migrated"),
    IN_PROGRESS("in_progress"),
    COMPLETED("completed");

    private String value;

    SectionMigrationStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SectionMigrationStatusEnum fromValue(String text) {
      for (SectionMigrationStatusEnum b : SectionMigrationStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SectionMigrationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SectionMigrationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SectionMigrationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SectionMigrationStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("section_migration_status")
  private SectionMigrationStatusEnum sectionMigrationStatus = null;

  @SerializedName("start_on")
  private LocalDate startOn = null;

  @SerializedName("team")
  private Object team = null;

  @SerializedName("workspace")
  private Object workspace = null;

  public ProjectBase archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

   /**
   * True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
   * @return archived
  **/
  @Schema(example = "false", description = "True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.")
  public Boolean isArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }

  public ProjectBase color(ColorEnum color) {
    this.color = color;
    return this;
  }

   /**
   * Color of the project.
   * @return color
  **/
  @Schema(example = "light-green", description = "Color of the project.")
  public ColorEnum getColor() {
    return color;
  }

  public void setColor(ColorEnum color) {
    this.color = color;
  }

   /**
   * The time at which this resource was created.
   * @return createdAt
  **/
  @Schema(description = "The time at which this resource was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public ProjectBase currentStatus(ProjectStatusResponse currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

   /**
   * Get currentStatus
   * @return currentStatus
  **/
  @Schema(description = "")
  public ProjectStatusResponse getCurrentStatus() {
    return currentStatus;
  }

  public void setCurrentStatus(ProjectStatusResponse currentStatus) {
    this.currentStatus = currentStatus;
  }

   /**
   * Array of Custom Fields.
   * @return customFields
  **/
  @Schema(description = "Array of Custom Fields.")
  public List<CustomFieldCompact> getCustomFields() {
    return customFields;
  }

   /**
   * Array of Custom Field Settings (in compact form).
   * @return customFieldSettings
  **/
  @Schema(description = "Array of Custom Field Settings (in compact form).")
  public List<CustomFieldSettingCompact> getCustomFieldSettings() {
    return customFieldSettings;
  }

  public ProjectBase defaultView(DefaultViewEnum defaultView) {
    this.defaultView = defaultView;
    return this;
  }

   /**
   * The default view (list, board, calendar, or timeline) of a project.
   * @return defaultView
  **/
  @Schema(example = "calendar", description = "The default view (list, board, calendar, or timeline) of a project.")
  public DefaultViewEnum getDefaultView() {
    return defaultView;
  }

  public void setDefaultView(DefaultViewEnum defaultView) {
    this.defaultView = defaultView;
  }

  public ProjectBase dueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

   /**
   * *Deprecated: new integrations should prefer the due_on field.*
   * @return dueDate
  **/
  @Schema(description = "*Deprecated: new integrations should prefer the due_on field.*")
  public OffsetDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }

  public ProjectBase dueOn(OffsetDateTime dueOn) {
    this.dueOn = dueOn;
    return this;
  }

   /**
   * The day on which this project is due. This takes a date with format YYYY-MM-DD.
   * @return dueOn
  **/
  @Schema(description = "The day on which this project is due. This takes a date with format YYYY-MM-DD.")
  public OffsetDateTime getDueOn() {
    return dueOn;
  }

  public void setDueOn(OffsetDateTime dueOn) {
    this.dueOn = dueOn;
  }

   /**
   * Array of users following this project. Followers are a subset of members who receive all notifications for a project, the default notification setting when adding members to a project in-product.
   * @return followers
  **/
  @Schema(description = "Array of users following this project. Followers are a subset of members who receive all notifications for a project, the default notification setting when adding members to a project in-product.")
  public List<UserCompact> getFollowers() {
    return followers;
  }

  public ProjectBase htmlNotes(String htmlNotes) {
    this.htmlNotes = htmlNotes;
    return this;
  }

   /**
   * [Opt In](#input-output-options). The notes of the project with formatting as HTML. *Note: This field is under active migration—please see our [blog post] (https://developers.asana.com/docs/#rich-text) for more information.*
   * @return htmlNotes
  **/
  @Schema(example = "These are things we need to purchase.", description = "[Opt In](#input-output-options). The notes of the project with formatting as HTML. *Note: This field is under active migration—please see our [blog post] (https://developers.asana.com/docs/#rich-text) for more information.*")
  public String getHtmlNotes() {
    return htmlNotes;
  }

  public void setHtmlNotes(String htmlNotes) {
    this.htmlNotes = htmlNotes;
  }

  public ProjectBase isTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
    return this;
  }

   /**
   * [Opt In](#input-output-options). Determines if the project is a template.
   * @return isTemplate
  **/
  @Schema(example = "false", description = "[Opt In](#input-output-options). Determines if the project is a template.")
  public Boolean isIsTemplate() {
    return isTemplate;
  }

  public void setIsTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
  }

   /**
   * The layout (board or list view) of a project
   * @return layout
  **/
  @Schema(description = "The layout (board or list view) of a project")
  public LayoutEnum getLayout() {
    return layout;
  }

   /**
   * Array of users who are members of this project.
   * @return members
  **/
  @Schema(description = "Array of users who are members of this project.")
  public List<UserCompact> getMembers() {
    return members;
  }

   /**
   * The time at which this project was last modified. *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
   * @return modifiedAt
  **/
  @Schema(description = "The time at which this project was last modified. *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*")
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

  public ProjectBase notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * More detailed, free-form textual information associated with the project.
   * @return notes
  **/
  @Schema(example = "These are things we need to purchase.", description = "More detailed, free-form textual information associated with the project.")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public ProjectBase owner(Object owner) {
    this.owner = owner;
    return this;
  }

   /**
   * The current owner of the project, may be null.
   * @return owner
  **/
  @Schema(description = "The current owner of the project, may be null.")
  public Object getOwner() {
    return owner;
  }

  public void setOwner(Object owner) {
    this.owner = owner;
  }

  public ProjectBase _public(Boolean _public) {
    this._public = _public;
    return this;
  }

   /**
   * True if the project is public to the organization. If false, do not share this project with other users in this organization without explicitly checking to see if they have access.
   * @return _public
  **/
  @Schema(example = "false", description = "True if the project is public to the organization. If false, do not share this project with other users in this organization without explicitly checking to see if they have access.")
  public Boolean isPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }

   /**
   * *Read-only* The section migration status of this project.
   * @return sectionMigrationStatus
  **/
  @Schema(example = "not_migrated", description = "*Read-only* The section migration status of this project.")
  public SectionMigrationStatusEnum getSectionMigrationStatus() {
    return sectionMigrationStatus;
  }

  public ProjectBase startOn(LocalDate startOn) {
    this.startOn = startOn;
    return this;
  }

   /**
   * The day on which work for this project begins, or null if the project has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter.*
   * @return startOn
  **/
  @Schema(description = "The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*")
  public LocalDate getStartOn() {
    return startOn;
  }

  public void setStartOn(LocalDate startOn) {
    this.startOn = startOn;
  }

  public ProjectBase team(Object team) {
    this.team = team;
    return this;
  }

   /**
   * Get team
   * @return team
  **/
  @Schema(description = "")
  public Object getTeam() {
    return team;
  }

  public void setTeam(Object team) {
    this.team = team;
  }

  public ProjectBase workspace(Object workspace) {
    this.workspace = workspace;
    return this;
  }

   /**
   * Get workspace
   * @return workspace
  **/
  @Schema(description = "")
  public Object getWorkspace() {
    return workspace;
  }

  public void setWorkspace(Object workspace) {
    this.workspace = workspace;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectBase projectBase = (ProjectBase) o;
    return Objects.equals(this.archived, projectBase.archived) &&
        Objects.equals(this.color, projectBase.color) &&
        Objects.equals(this.createdAt, projectBase.createdAt) &&
        Objects.equals(this.currentStatus, projectBase.currentStatus) &&
        Objects.equals(this.customFields, projectBase.customFields) &&
        Objects.equals(this.customFieldSettings, projectBase.customFieldSettings) &&
        Objects.equals(this.defaultView, projectBase.defaultView) &&
        Objects.equals(this.dueDate, projectBase.dueDate) &&
        Objects.equals(this.dueOn, projectBase.dueOn) &&
        Objects.equals(this.followers, projectBase.followers) &&
        Objects.equals(this.htmlNotes, projectBase.htmlNotes) &&
        Objects.equals(this.isTemplate, projectBase.isTemplate) &&
        Objects.equals(this.layout, projectBase.layout) &&
        Objects.equals(this.members, projectBase.members) &&
        Objects.equals(this.modifiedAt, projectBase.modifiedAt) &&
        Objects.equals(this.notes, projectBase.notes) &&
        Objects.equals(this.owner, projectBase.owner) &&
        Objects.equals(this._public, projectBase._public) &&
        Objects.equals(this.sectionMigrationStatus, projectBase.sectionMigrationStatus) &&
        Objects.equals(this.startOn, projectBase.startOn) &&
        Objects.equals(this.team, projectBase.team) &&
        Objects.equals(this.workspace, projectBase.workspace) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archived, color, createdAt, currentStatus, customFields, customFieldSettings, defaultView, dueDate, dueOn, followers, htmlNotes, isTemplate, layout, members, modifiedAt, notes, owner, _public, sectionMigrationStatus, startOn, team, workspace, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectBase {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    customFieldSettings: ").append(toIndentedString(customFieldSettings)).append("\n");
    sb.append("    defaultView: ").append(toIndentedString(defaultView)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    dueOn: ").append(toIndentedString(dueOn)).append("\n");
    sb.append("    followers: ").append(toIndentedString(followers)).append("\n");
    sb.append("    htmlNotes: ").append(toIndentedString(htmlNotes)).append("\n");
    sb.append("    isTemplate: ").append(toIndentedString(isTemplate)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    sectionMigrationStatus: ").append(toIndentedString(sectionMigrationStatus)).append("\n");
    sb.append("    startOn: ").append(toIndentedString(startOn)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    workspace: ").append(toIndentedString(workspace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
