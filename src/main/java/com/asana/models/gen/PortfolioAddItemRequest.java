/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.asana.models.gen;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * PortfolioAddItemRequest
 */


public class PortfolioAddItemRequest {
  @SerializedName("item")
  private String item = null;

  @SerializedName("insert_before")
  private String insertBefore = null;

  @SerializedName("insert_after")
  private String insertAfter = null;

  public PortfolioAddItemRequest item(String item) {
    this.item = item;
    return this;
  }

   /**
   * The item to add to the portfolio.
   * @return item
  **/
  @Schema(example = "1331", required = true, description = "The item to add to the portfolio.")
  public String getItem() {
    return item;
  }

  public void setItem(String item) {
    this.item = item;
  }

  public PortfolioAddItemRequest insertBefore(String insertBefore) {
    this.insertBefore = insertBefore;
    return this;
  }

   /**
   * An id of an item in this portfolio. The new item will be added before the one specified here. &#x60;insert_before&#x60; and &#x60;insert_after&#x60; parameters cannot both be specified.
   * @return insertBefore
  **/
  @Schema(example = "1331", description = "An id of an item in this portfolio. The new item will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.")
  public String getInsertBefore() {
    return insertBefore;
  }

  public void setInsertBefore(String insertBefore) {
    this.insertBefore = insertBefore;
  }

  public PortfolioAddItemRequest insertAfter(String insertAfter) {
    this.insertAfter = insertAfter;
    return this;
  }

   /**
   * An id of an item in this portfolio. The new item will be added after the one specified here. &#x60;insert_before&#x60; and &#x60;insert_after&#x60; parameters cannot both be specified.
   * @return insertAfter
  **/
  @Schema(example = "1331", description = "An id of an item in this portfolio. The new item will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.")
  public String getInsertAfter() {
    return insertAfter;
  }

  public void setInsertAfter(String insertAfter) {
    this.insertAfter = insertAfter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortfolioAddItemRequest portfolioAddItemRequest = (PortfolioAddItemRequest) o;
    return Objects.equals(this.item, portfolioAddItemRequest.item) &&
        Objects.equals(this.insertBefore, portfolioAddItemRequest.insertBefore) &&
        Objects.equals(this.insertAfter, portfolioAddItemRequest.insertAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(item, insertBefore, insertAfter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioAddItemRequest {\n");
    
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    insertBefore: ").append(toIndentedString(insertBefore)).append("\n");
    sb.append("    insertAfter: ").append(toIndentedString(insertAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
