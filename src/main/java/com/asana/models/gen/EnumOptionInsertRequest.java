/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.asana.models.gen;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * EnumOptionInsertRequest
 */


public class EnumOptionInsertRequest {
  @SerializedName("enum_option")
  private String enumOption = null;

  @SerializedName("before_enum_option")
  private String beforeEnumOption = null;

  @SerializedName("after_enum_option")
  private String afterEnumOption = null;


  public EnumOptionInsertRequest enumOption(String enumOption) {
    this.enumOption = enumOption;
    return this;
  }

   /**
   * The gid of the enum option to relocate.
   * @return enumOption
  **/
  @Schema(example = "97285", required = true, description = "The gid of the enum option to relocate.")
  public String getEnumOption() {
    return enumOption;
  }

  public void setEnumOption(String enumOption) {
    this.enumOption = enumOption;
  }

  public EnumOptionInsertRequest beforeEnumOption(String beforeEnumOption) {
    this.beforeEnumOption = beforeEnumOption;
    return this;
  }

   /**
   * An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
   * @return beforeEnumOption
  **/
  @Schema(example = "12345", description = "An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.")
  public String getBeforeEnumOption() {
    return beforeEnumOption;
  }

  public void setBeforeEnumOption(String beforeEnumOption) {
    this.beforeEnumOption = beforeEnumOption;
  }

  public EnumOptionInsertRequest afterEnumOption(String afterEnumOption) {
    this.afterEnumOption = afterEnumOption;
    return this;
  }

   /**
   * An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
   * @return afterEnumOption
  **/
  @Schema(example = "12345", description = "An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.")
  public String getAfterEnumOption() {
    return afterEnumOption;
  }

  public void setAfterEnumOption(String afterEnumOption) {
    this.afterEnumOption = afterEnumOption;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnumOptionInsertRequest enumOptionInsertRequest = (EnumOptionInsertRequest) o;
    return Objects.equals(this.enumOption, enumOptionInsertRequest.enumOption) &&
        Objects.equals(this.beforeEnumOption, enumOptionInsertRequest.beforeEnumOption) &&
        Objects.equals(this.afterEnumOption, enumOptionInsertRequest.afterEnumOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enumOption, beforeEnumOption, afterEnumOption);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnumOptionInsertRequest {\n");
    
    sb.append("    enumOption: ").append(toIndentedString(enumOption)).append("\n");
    sb.append("    beforeEnumOption: ").append(toIndentedString(beforeEnumOption)).append("\n");
    sb.append("    afterEnumOption: ").append(toIndentedString(afterEnumOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
