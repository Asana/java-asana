/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.asana.models.gen;

import java.util.Objects;
import java.util.Arrays;
import com.asana.models.gen.AsanaResource;
import com.asana.models.gen.CustomFieldResponse;
import com.asana.models.gen.TaskBaseExternal;
import com.asana.models.gen.TaskBaseMemberships;
import com.asana.models.gen.TaskCompact;
import com.asana.models.gen.UserCompact;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.asana.models.GenResource;
/**
 * TaskBase
 */


public class TaskBase extends TaskCompact {
  /**
   * Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.
   */
  @JsonAdapter(AssigneeStatusEnum.Adapter.class)
  public enum AssigneeStatusEnum {
    TODAY("today"),
    UPCOMING("upcoming"),
    LATER("later"),
    NEW("new"),
    INBOX("inbox");

    private String value;

    AssigneeStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AssigneeStatusEnum fromValue(String text) {
      for (AssigneeStatusEnum b : AssigneeStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AssigneeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssigneeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssigneeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AssigneeStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("assignee_status")
  private AssigneeStatusEnum assigneeStatus = null;

  @SerializedName("completed")
  private Boolean completed = null;

  @SerializedName("completed_at")
  private OffsetDateTime completedAt = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("custom_fields")
  private List<CustomFieldResponse> customFields = null;

  @SerializedName("dependencies")
  private List<AsanaResource> dependencies = null;

  @SerializedName("dependents")
  private List<AsanaResource> dependents = null;

  @SerializedName("due_at")
  private LocalDate dueAt = null;

  @SerializedName("due_on")
  private LocalDate dueOn = null;

  @SerializedName("external")
  private TaskBaseExternal external = null;

  @SerializedName("html_notes")
  private String htmlNotes = null;

  @SerializedName("hearted")
  private Boolean hearted = null;

  @SerializedName("hearts")
  private List<UserCompact> hearts = null;

  @SerializedName("is_rendered_as_separator")
  private Boolean isRenderedAsSeparator = null;

  @SerializedName("liked")
  private Boolean liked = null;

  @SerializedName("likes")
  private List<UserCompact> likes = null;

  @SerializedName("memberships")
  private List<TaskBaseMemberships> memberships = null;

  @SerializedName("modified_at")
  private OffsetDateTime modifiedAt = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("notes")
  private String notes = null;

  @SerializedName("num_hearts")
  private Integer numHearts = null;

  @SerializedName("num_likes")
  private Integer numLikes = null;

  @SerializedName("num_subtasks")
  private Integer numSubtasks = null;

  /**
   * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date. *Note: The resource_subtype of &#x60;section&#x60; is under active migrationâ€”please see our [forum post](https://forum.asana.com/t/sections-are-dead-long-live-sections) for more information.*
   */
  @JsonAdapter(ResourceSubtypeEnum.Adapter.class)
  public enum ResourceSubtypeEnum {
    DEFAULT_TASK("default_task"),
    MILESTONE("milestone"),
    SECTION("section");

    private String value;

    ResourceSubtypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResourceSubtypeEnum fromValue(String text) {
      for (ResourceSubtypeEnum b : ResourceSubtypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResourceSubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceSubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceSubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResourceSubtypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("resource_subtype")
  private ResourceSubtypeEnum resourceSubtype = null;

  @SerializedName("start_on")
  private LocalDate startOn = null;

  public TaskBase assigneeStatus(AssigneeStatusEnum assigneeStatus) {
    this.assigneeStatus = assigneeStatus;
    return this;
  }

   /**
   * Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.
   * @return assigneeStatus
  **/
  @Schema(example = "upcoming", description = "Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.")
  public AssigneeStatusEnum getAssigneeStatus() {
    return assigneeStatus;
  }

  public void setAssigneeStatus(AssigneeStatusEnum assigneeStatus) {
    this.assigneeStatus = assigneeStatus;
  }

  public TaskBase completed(Boolean completed) {
    this.completed = completed;
    return this;
  }

   /**
   * True if the task is currently marked complete, false if not.
   * @return completed
  **/
  @Schema(example = "false", description = "True if the task is currently marked complete, false if not.")
  public Boolean isCompleted() {
    return completed;
  }

  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }

   /**
   * The time at which this task was completed, or null if the task is incomplete.
   * @return completedAt
  **/
  @Schema(description = "The time at which this task was completed, or null if the task is incomplete.")
  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }

   /**
   * The time at which this resource was created.
   * @return createdAt
  **/
  @Schema(description = "The time at which this resource was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * Array of custom field values applied to the project. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an &#x60;enum_value&#x60; property for custom fields of type &#x60;enum&#x60;, a &#x60;text_value&#x60; property for custom fields of type &#x60;text&#x60;, and so on. Please note that the &#x60;gid&#x60; returned on each custom field value *is identical* to the &#x60;gid&#x60; of the custom field, which allows referencing the custom field metadata through the &#x60;/custom_fields/custom_field-gid&#x60; endpoint.
   * @return customFields
  **/
  @Schema(description = "Array of custom field values applied to the project. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an `enum_value` property for custom fields of type `enum`, a `text_value` property for custom fields of type `text`, and so on. Please note that the `gid` returned on each custom field value *is identical* to the `gid` of the custom field, which allows referencing the custom field metadata through the `/custom_fields/custom_field-gid` endpoint.")
  public List<CustomFieldResponse> getCustomFields() {
    return customFields;
  }

   /**
   * [Opt In](#input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.
   * @return dependencies
  **/
  @Schema(example = "[{\"gid\":\"1234\"},{\"gid\":\"4321\"}]", description = "[Opt In](#input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.")
  public List<AsanaResource> getDependencies() {
    return dependencies;
  }

   /**
   * [Opt In](#input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
   * @return dependents
  **/
  @Schema(example = "[{\"gid\":\"1234\"},{\"gid\":\"4321\"}]", description = "[Opt In](#input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.")
  public List<AsanaResource> getDependents() {
    return dependents;
  }

  public TaskBase dueAt(LocalDate dueAt) {
    this.dueAt = dueAt;
    return this;
  }

   /**
   * Date and time on which this task is due, or null if the task has no due time. This takes a UTC timestamp and should not be used together with &#x60;due_on&#x60;.
   * @return dueAt
  **/
  @Schema(description = "Date and time on which this task is due, or null if the task has no due time. This takes a UTC timestamp and should not be used together with `due_on`.")
  public LocalDate getDueAt() {
    return dueAt;
  }

  public void setDueAt(LocalDate dueAt) {
    this.dueAt = dueAt;
  }

  public TaskBase dueOn(LocalDate dueOn) {
    this.dueOn = dueOn;
    return this;
  }

   /**
   * Date on which this task is due, or null if the task has no due date.  This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with due_at.
   * @return dueOn
  **/
  @Schema(description = "Date on which this task is due, or null if the task has no due date.  This takes a date with `YYYY-MM-DD` format and should not be used together with due_at.")
  public LocalDate getDueOn() {
    return dueOn;
  }

  public void setDueOn(LocalDate dueOn) {
    this.dueOn = dueOn;
  }

  public TaskBase external(TaskBaseExternal external) {
    this.external = external;
    return this;
  }

   /**
   * Get external
   * @return external
  **/
  @Schema(description = "")
  public TaskBaseExternal getExternal() {
    return external;
  }

  public void setExternal(TaskBaseExternal external) {
    this.external = external;
  }

  public TaskBase htmlNotes(String htmlNotes) {
    this.htmlNotes = htmlNotes;
    return this;
  }

   /**
   * [Opt In](#input-output-options). The notes of the text with formatting as HTML. *Note: This field is under active migrationâ€”please see our blog post for more information.*
   * @return htmlNotes
  **/
  @Schema(example = "<body>Mittens <em>really</em> likes the stuff from Humboldt.</body>", description = "[Opt In](#input-output-options). The notes of the text with formatting as HTML. *Note: This field is under active migrationâ€”please see our blog post for more information.*")
  public String getHtmlNotes() {
    return htmlNotes;
  }

  public void setHtmlNotes(String htmlNotes) {
    this.htmlNotes = htmlNotes;
  }

   /**
   * *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
   * @return hearted
  **/
  @Schema(example = "true", description = "*Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.")
  public Boolean isHearted() {
    return hearted;
  }

   /**
   * *Deprecated - please use likes instead* Array of users who have hearted this task.
   * @return hearts
  **/
  @Schema(description = "*Deprecated - please use likes instead* Array of users who have hearted this task.")
  public List<UserCompact> getHearts() {
    return hearts;
  }

   /**
   * [Opt In](#input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](#asana-sections) without being true &#x60;section&#x60; objects. If a &#x60;task&#x60; object is rendered this way in any context it will have the property &#x60;is_rendered_as_separator&#x60; set to &#x60;true&#x60;.&lt;br /&gt;&lt;br /&gt;*Note: Until the default behavior for our API changes integrations must [opt in to the &#x60;new_sections&#x60; change] (https://forum.asana.com/t/sections-are-dead-long-live-sections/33951) to modify the &#x60;is_rendered_as_separator&#x60; property.*
   * @return isRenderedAsSeparator
  **/
  @Schema(example = "false", description = "[Opt In](#input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](#asana-sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.<br /><br />*Note: Until the default behavior for our API changes integrations must [opt in to the `new_sections` change] (https://forum.asana.com/t/sections-are-dead-long-live-sections/33951) to modify the `is_rendered_as_separator` property.*")
  public Boolean isIsRenderedAsSeparator() {
    return isRenderedAsSeparator;
  }

   /**
   * True if the task is liked by the authorized user, false if not.
   * @return liked
  **/
  @Schema(example = "true", description = "True if the task is liked by the authorized user, false if not.")
  public Boolean isLiked() {
    return liked;
  }

   /**
   * Array of users who have liked this task.
   * @return likes
  **/
  @Schema(description = "Array of users who have liked this task.")
  public List<UserCompact> getLikes() {
    return likes;
  }

   /**
   * *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the &#x60;addProject&#x60; and &#x60;removeProject&#x60; endpoints. Note that over time, more types of memberships may be added to this property.
   * @return memberships
  **/
  @Schema(description = "*Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.")
  public List<TaskBaseMemberships> getMemberships() {
    return memberships;
  }

   /**
   * The time at which this task was last modified.  *Note: This does not currently reflect any changes in associations such as projects or comments that may have been added or removed from the task.*
   * @return modifiedAt
  **/
  @Schema(description = "The time at which this task was last modified.  *Note: This does not currently reflect any changes in associations such as projects or comments that may have been added or removed from the task.*")
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

  public TaskBase name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
   * @return name
  **/
  @Schema(example = "Buy catnip", description = "Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TaskBase notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * More detailed, free-form textual information associated with the task.
   * @return notes
  **/
  @Schema(example = "Mittens really likes the stuff from Humboldt.", description = "More detailed, free-form textual information associated with the task.")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

   /**
   * *Deprecated - please use likes instead* The number of users who have hearted this task.
   * @return numHearts
  **/
  @Schema(example = "5", description = "*Deprecated - please use likes instead* The number of users who have hearted this task.")
  public Integer getNumHearts() {
    return numHearts;
  }

   /**
   * The number of users who have liked this task.
   * @return numLikes
  **/
  @Schema(example = "5", description = "The number of users who have liked this task.")
  public Integer getNumLikes() {
    return numLikes;
  }

   /**
   * [Opt In](#input-output-options). The number of subtasks on this task. 
   * @return numSubtasks
  **/
  @Schema(example = "3", description = "[Opt In](#input-output-options). The number of subtasks on this task. ")
  public Integer getNumSubtasks() {
    return numSubtasks;
  }

   /**
   * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date. *Note: The resource_subtype of &#x60;section&#x60; is under active migrationâ€”please see our [forum post](https://forum.asana.com/t/sections-are-dead-long-live-sections) for more information.*
   * @return resourceSubtype
  **/
  @Schema(example = "default_task", description = "The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date. *Note: The resource_subtype of `section` is under active migrationâ€”please see our [forum post](https://forum.asana.com/t/sections-are-dead-long-live-sections) for more information.*")
  public ResourceSubtypeEnum getResourceSubtype() {
    return resourceSubtype;
  }

  public TaskBase startOn(LocalDate startOn) {
    this.startOn = startOn;
    return this;
  }

   /**
   * The day on which work begins for the task , or null if the task has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter.*
   * @return startOn
  **/
  @Schema(description = "The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*")
  public LocalDate getStartOn() {
    return startOn;
  }

  public void setStartOn(LocalDate startOn) {
    this.startOn = startOn;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskBase taskBase = (TaskBase) o;
    return Objects.equals(this.assigneeStatus, taskBase.assigneeStatus) &&
        Objects.equals(this.completed, taskBase.completed) &&
        Objects.equals(this.completedAt, taskBase.completedAt) &&
        Objects.equals(this.createdAt, taskBase.createdAt) &&
        Objects.equals(this.customFields, taskBase.customFields) &&
        Objects.equals(this.dependencies, taskBase.dependencies) &&
        Objects.equals(this.dependents, taskBase.dependents) &&
        Objects.equals(this.dueAt, taskBase.dueAt) &&
        Objects.equals(this.dueOn, taskBase.dueOn) &&
        Objects.equals(this.external, taskBase.external) &&
        Objects.equals(this.htmlNotes, taskBase.htmlNotes) &&
        Objects.equals(this.hearted, taskBase.hearted) &&
        Objects.equals(this.hearts, taskBase.hearts) &&
        Objects.equals(this.isRenderedAsSeparator, taskBase.isRenderedAsSeparator) &&
        Objects.equals(this.liked, taskBase.liked) &&
        Objects.equals(this.likes, taskBase.likes) &&
        Objects.equals(this.memberships, taskBase.memberships) &&
        Objects.equals(this.modifiedAt, taskBase.modifiedAt) &&
        Objects.equals(this.name, taskBase.name) &&
        Objects.equals(this.notes, taskBase.notes) &&
        Objects.equals(this.numHearts, taskBase.numHearts) &&
        Objects.equals(this.numLikes, taskBase.numLikes) &&
        Objects.equals(this.numSubtasks, taskBase.numSubtasks) &&
        Objects.equals(this.resourceSubtype, taskBase.resourceSubtype) &&
        Objects.equals(this.startOn, taskBase.startOn) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assigneeStatus, completed, completedAt, createdAt, customFields, dependencies, dependents, dueAt, dueOn, external, htmlNotes, hearted, hearts, isRenderedAsSeparator, liked, likes, memberships, modifiedAt, name, notes, numHearts, numLikes, numSubtasks, resourceSubtype, startOn, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskBase {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    assigneeStatus: ").append(toIndentedString(assigneeStatus)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    dependents: ").append(toIndentedString(dependents)).append("\n");
    sb.append("    dueAt: ").append(toIndentedString(dueAt)).append("\n");
    sb.append("    dueOn: ").append(toIndentedString(dueOn)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("    htmlNotes: ").append(toIndentedString(htmlNotes)).append("\n");
    sb.append("    hearted: ").append(toIndentedString(hearted)).append("\n");
    sb.append("    hearts: ").append(toIndentedString(hearts)).append("\n");
    sb.append("    isRenderedAsSeparator: ").append(toIndentedString(isRenderedAsSeparator)).append("\n");
    sb.append("    liked: ").append(toIndentedString(liked)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    memberships: ").append(toIndentedString(memberships)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    numHearts: ").append(toIndentedString(numHearts)).append("\n");
    sb.append("    numLikes: ").append(toIndentedString(numLikes)).append("\n");
    sb.append("    numSubtasks: ").append(toIndentedString(numSubtasks)).append("\n");
    sb.append("    resourceSubtype: ").append(toIndentedString(resourceSubtype)).append("\n");
    sb.append("    startOn: ").append(toIndentedString(startOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
