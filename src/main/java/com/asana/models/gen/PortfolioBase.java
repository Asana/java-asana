/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.asana.models.gen;

import java.util.Objects;
import java.util.Arrays;
import com.asana.models.gen.CustomFieldSettingResponse;
import com.asana.models.gen.PortfolioCompact;
import com.asana.models.gen.UserCompact;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.asana.models.GenResource;
/**
 * PortfolioBase
 */


public class PortfolioBase extends PortfolioCompact {
  /**
   * Color of the portfolio.
   */
  @JsonAdapter(ColorEnum.Adapter.class)
  public enum ColorEnum {
    DARK_PINK("dark-pink"),
    DARK_GREEN("dark-green"),
    DARK_BLUE("dark-blue"),
    DARK_RED("dark-red"),
    DARK_TEAL("dark-teal"),
    DARK_BROWN("dark-brown"),
    DARK_ORANGE("dark-orange"),
    DARK_PURPLE("dark-purple"),
    DARK_WARM_GRAY("dark-warm-gray"),
    LIGHT_PINK("light-pink"),
    LIGHT_GREEN("light-green"),
    LIGHT_BLUE("light-blue"),
    LIGHT_RED("light-red"),
    LIGHT_TEAL("light-teal"),
    LIGHT_BROWN("light-brown"),
    LIGHT_ORANGE("light-orange"),
    LIGHT_PURPLE("light-purple"),
    LIGHT_WARM_GRAY("light-warm-gray");

    private String value;

    ColorEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ColorEnum fromValue(String text) {
      for (ColorEnum b : ColorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ColorEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("color")
  private ColorEnum color = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("created_by")
  private UserCompact createdBy = null;

  @SerializedName("custom_field_settings")
  private List<CustomFieldSettingResponse> customFieldSettings = null;

  @SerializedName("owner")
  private Object owner = null;

  @SerializedName("workspace")
  private Object workspace = null;

  public PortfolioBase color(ColorEnum color) {
    this.color = color;
    return this;
  }

   /**
   * Color of the portfolio.
   * @return color
  **/
  @Schema(example = "light-green", description = "Color of the portfolio.")
  public ColorEnum getColor() {
    return color;
  }

  public void setColor(ColorEnum color) {
    this.color = color;
  }

   /**
   * The time at which this resource was created.
   * @return createdAt
  **/
  @Schema(description = "The time at which this resource was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public PortfolioBase createdBy(UserCompact createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @Schema(description = "")
  public UserCompact getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserCompact createdBy) {
    this.createdBy = createdBy;
  }

   /**
   * Array of custom field settings applied to the portfolio.
   * @return customFieldSettings
  **/
  @Schema(description = "Array of custom field settings applied to the portfolio.")
  public List<CustomFieldSettingResponse> getCustomFieldSettings() {
    return customFieldSettings;
  }

   /**
   * The current owner of the portfolio.
   * @return owner
  **/
  @Schema(description = "The current owner of the portfolio.")
  public Object getOwner() {
    return owner;
  }

  public PortfolioBase workspace(Object workspace) {
    this.workspace = workspace;
    return this;
  }

   /**
   * Get workspace
   * @return workspace
  **/
  @Schema(description = "")
  public Object getWorkspace() {
    return workspace;
  }

  public void setWorkspace(Object workspace) {
    this.workspace = workspace;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortfolioBase portfolioBase = (PortfolioBase) o;
    return Objects.equals(this.color, portfolioBase.color) &&
        Objects.equals(this.createdAt, portfolioBase.createdAt) &&
        Objects.equals(this.createdBy, portfolioBase.createdBy) &&
        Objects.equals(this.customFieldSettings, portfolioBase.customFieldSettings) &&
        Objects.equals(this.owner, portfolioBase.owner) &&
        Objects.equals(this.workspace, portfolioBase.workspace) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, createdAt, createdBy, customFieldSettings, owner, workspace, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioBase {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    customFieldSettings: ").append(toIndentedString(customFieldSettings)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    workspace: ").append(toIndentedString(workspace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
