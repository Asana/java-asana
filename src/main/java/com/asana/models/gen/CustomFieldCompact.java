/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.asana.models.gen;

import java.util.Objects;
import java.util.Arrays;
import com.asana.models.gen.AsanaResource;
import com.asana.models.gen.EnumOptionCompact;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import com.asana.models.GenResource;
/**
 * CustomFieldCompact
 */


public class CustomFieldCompact extends AsanaResource {
  @SerializedName("name")
  private String name = null;

  /**
   * The type of the custom field. Must be one of the given values. 
   */
  @JsonAdapter(ResourceSubtypeEnum.Adapter.class)
  public enum ResourceSubtypeEnum {
    TEXT("text"),
    ENUM("enum"),
    NUMBER("number");

    private String value;

    ResourceSubtypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResourceSubtypeEnum fromValue(String text) {
      for (ResourceSubtypeEnum b : ResourceSubtypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResourceSubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceSubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceSubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResourceSubtypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("resource_subtype")
  private ResourceSubtypeEnum resourceSubtype = null;

  /**
   * *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TEXT("text"),
    ENUM("enum"),
    NUMBER("number");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("enum_options")
  private List<EnumOptionCompact> enumOptions = null;

  @SerializedName("enum_value")
  private Object enumValue = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("text_value")
  private String textValue = null;

  public CustomFieldCompact name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the custom field.
   * @return name
  **/
  @Schema(example = "Status", description = "The name of the custom field.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CustomFieldCompact resourceSubtype(ResourceSubtypeEnum resourceSubtype) {
    this.resourceSubtype = resourceSubtype;
    return this;
  }

   /**
   * The type of the custom field. Must be one of the given values. 
   * @return resourceSubtype
  **/
  @Schema(example = "text", description = "The type of the custom field. Must be one of the given values. ")
  public ResourceSubtypeEnum getResourceSubtype() {
    return resourceSubtype;
  }

  public void setResourceSubtype(ResourceSubtypeEnum resourceSubtype) {
    this.resourceSubtype = resourceSubtype;
  }

   /**
   * *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
   * @return type
  **/
  @Schema(description = "*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. ")
  public TypeEnum getType() {
    return type;
  }

  public CustomFieldCompact enumOptions(List<EnumOptionCompact> enumOptions) {
    this.enumOptions = enumOptions;
    return this;
  }

  public CustomFieldCompact addEnumOptionsItem(EnumOptionCompact enumOptionsItem) {
    if (this.enumOptions == null) {
      this.enumOptions = new ArrayList<>();
    }
    this.enumOptions.add(enumOptionsItem);
    return this;
  }

   /**
   * *Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](#create-an-enum-option).
   * @return enumOptions
  **/
  @Schema(description = "*Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](#create-an-enum-option).")
  public List<EnumOptionCompact> getEnumOptions() {
    return enumOptions;
  }

  public void setEnumOptions(List<EnumOptionCompact> enumOptions) {
    this.enumOptions = enumOptions;
  }

  public CustomFieldCompact enumValue(Object enumValue) {
    this.enumValue = enumValue;
    return this;
  }

   /**
   * Get enumValue
   * @return enumValue
  **/
  @Schema(description = "")
  public Object getEnumValue() {
    return enumValue;
  }

  public void setEnumValue(Object enumValue) {
    this.enumValue = enumValue;
  }

  public CustomFieldCompact enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * *Conditional*. Determines if the custom field is enabled or not.
   * @return enabled
  **/
  @Schema(example = "true", description = "*Conditional*. Determines if the custom field is enabled or not.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public CustomFieldCompact textValue(String textValue) {
    this.textValue = textValue;
    return this;
  }

   /**
   * *Conditional*. This string is the value of a text custom field.
   * @return textValue
  **/
  @Schema(example = "Some Value", description = "*Conditional*. This string is the value of a text custom field.")
  public String getTextValue() {
    return textValue;
  }

  public void setTextValue(String textValue) {
    this.textValue = textValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomFieldCompact customFieldCompact = (CustomFieldCompact) o;
    return Objects.equals(this.name, customFieldCompact.name) &&
        Objects.equals(this.resourceSubtype, customFieldCompact.resourceSubtype) &&
        Objects.equals(this.type, customFieldCompact.type) &&
        Objects.equals(this.enumOptions, customFieldCompact.enumOptions) &&
        Objects.equals(this.enumValue, customFieldCompact.enumValue) &&
        Objects.equals(this.enabled, customFieldCompact.enabled) &&
        Objects.equals(this.textValue, customFieldCompact.textValue) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, resourceSubtype, type, enumOptions, enumValue, enabled, textValue, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomFieldCompact {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceSubtype: ").append(toIndentedString(resourceSubtype)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    enumOptions: ").append(toIndentedString(enumOptions)).append("\n");
    sb.append("    enumValue: ").append(toIndentedString(enumValue)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    textValue: ").append(toIndentedString(textValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
