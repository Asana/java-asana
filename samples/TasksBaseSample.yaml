tasksbase: 
    addDependenciesForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        JsonElement result = client.tasks.addDependenciesForTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    addDependentsForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        List<Task> result = client.tasks.addDependentsForTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    addFollowersForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        JsonElement result = client.tasks.addFollowersForTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    addProjectForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        JsonElement result = client.tasks.addProjectForTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    addTagForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        JsonElement result = client.tasks.addTagForTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    createSubtaskForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        Task result = client.tasks.createSubtaskForTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    createTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        Task result = client.tasks.createTask()
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    deleteTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        JsonElement result = client.tasks.deleteTask(taskGid)
            .option("pretty", true)
            .execute();
    duplicateTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        Job result = client.tasks.duplicateTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    getDependenciesForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        List<Task> result = client.tasks.getDependenciesForTask(taskGid)
            .option("pretty", true)
            .execute();
    getDependentsForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        List<Task> result = client.tasks.getDependentsForTask(taskGid)
            .option("pretty", true)
            .execute();
    getSubtasksForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        List<Task> result = client.tasks.getSubtasksForTask(taskGid)
            .option("pretty", true)
            .execute();
    getTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        Task result = client.tasks.getTask(taskGid)
            .option("pretty", true)
            .execute();
    getTasks: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        List<Task> result = client.tasks.getTasks(modifiedSince, completedSince, workspace, section, project, assignee)
            .option("pretty", true)
            .execute();
    getTasksForProject: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        List<Task> result = client.tasks.getTasksForProject(projectGid)
            .option("pretty", true)
            .execute();
    getTasksForSection: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        List<Task> result = client.tasks.getTasksForSection(sectionGid)
            .option("pretty", true)
            .execute();
    getTasksForTag: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        List<Task> result = client.tasks.getTasksForTag(tagGid)
            .option("pretty", true)
            .execute();
    getTasksForUserTaskList: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        List<Task> result = client.tasks.getTasksForUserTaskList(userTaskListGid, completedSince)
            .option("pretty", true)
            .execute();
    removeDependenciesForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        List<JsonElement> result = client.tasks.removeDependenciesForTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    removeDependentsForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        List<JsonElement> result = client.tasks.removeDependentsForTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    removeFollowerForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        JsonElement result = client.tasks.removeFollowerForTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    removeProjectForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        JsonElement result = client.tasks.removeProjectForTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    removeTagForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        JsonElement result = client.tasks.removeTagForTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    searchTasksForWorkspace: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        List<Task> result = client.tasks.searchTasksForWorkspace(workspaceGid, sortAscending, sortBy, isSubtask, completed, hasAttachment, isBlocked, isBlocking, modifiedAtAfter, modifiedAtBefore, dueOnBefore, modifiedOn, modifiedOnAfter, modifiedOnBefore, completedAtAfter, completedAtBefore, completedOn, completedOnAfter, completedOnBefore, createdAtAfter, commentedOnByNot, createdAtBefore, createdOn, createdOnAfter, createdOnBefore, startOn, startOnAfter, startOnBefore, dueAtAfter, dueAtBefore, dueOn, commentedOnByAny, dueOnAfter, likedByNot, likedByAny, assignedByNot, assignedByAny, createdByNot, createdByAny, followersNot, followersAny, teamsAny, tagsAll, tagsNot, tagsAny, sectionsAll, sectionsNot, sectionsAny, projectsAll, projectsNot, projectsAny, portfoliosAny, assigneeStatus, assigneeNot, assigneeAny, resourceSubtype, text)
            .option("pretty", true)
            .execute();
    setParentForTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        Task result = client.tasks.setParentForTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
    updateTask: >-
        import com.asana.Client;


        Client client = Client.accessToken("PERSONAL_ACCESS_TOKEN");


        Task result = client.tasks.updateTask(taskGid)
            .data("field", "value")
            .data("field", "value")
            .option("pretty", true)
            .execute();
